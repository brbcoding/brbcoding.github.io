<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cody G. Henshaw]]></title>
  <link href="http://brbcoding.github.io/atom.xml" rel="self"/>
  <link href="http://brbcoding.github.io/"/>
  <updated>2013-12-17T19:06:19-05:00</updated>
  <id>http://brbcoding.github.io/</id>
  <author>
    <name><![CDATA[Cody G. Henshaw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Faking an animated .gif with CSS keyframes]]></title>
    <link href="http://brbcoding.github.io/blog/2013/12/17/faux-animated-gifs-with-css3-keyframes/"/>
    
    <updated>2013-12-17T16:31:31-05:00</updated>
    <id>http://brbcoding.github.io/blog/2013/12/17/faux-animated-gifs-with-css3-keyframes</id>
    
    <content type="html"><![CDATA[<p>Animated gifs can be pretty impactful if used correctly. They can illustrate a point without having to embed a video or a wall of text. The issue with gifs is that they are just pictures. They can&rsquo;t be stopped or started (though many people fake it by swapping a static image). I ran across a question on Stack Overflow which asked for a solution to stop (by stop, I mean freeze and don&rsquo;t reset) a gif on <code>:hover</code> and resume on mouseout. JavaScript plugins were immediately suggested, which might be the correct solution to this problem&hellip; but let&rsquo;s try it with CSS animations anyway.</p>

<p>The first thing we will need to do is break our .gif into frames. There are tons of tools online that allow you to do this, and I&rsquo;d even guess that ImageMagick will do it for you as well. Here&rsquo;s the one I chose to start with:</p>

<p><img src="http://i.imgur.com/MxrP3DG.gif" alt="bananananana" /></p>

<p>I broke mine into 8 individual frames. Here they are:</p>

<p><img src="http://i.imgur.com/E2ee6fI.gif" alt="banana1" />
<img src="http://i.imgur.com/JIi0uul.gif" alt="banana2" />
<img src="http://i.imgur.com/owNGnNN.gif" alt="banana3" />
<img src="http://i.imgur.com/2Ii6XOz.gif" alt="banana4" />
<img src="http://i.imgur.com/ZmQBrQ5.gif" alt="banana5" />
<img src="http://i.imgur.com/iAsfHyY.gif" alt="banana6" />
<img src="http://i.imgur.com/AJwRblj.gif" alt="banana7" />
<img src="http://i.imgur.com/fx5wUNY.gif" alt="banana8" /></p>

<p>So, that&rsquo;s it for prep work&hellip; Let&rsquo;s get our html ready.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;faux-gif&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yep, that&rsquo;s it&hellip; Now, let&rsquo;s add one of the images as a <code>background-image</code>.</p>

<div data-height="268" data-theme-id="2905" data-slug-hash="gqxEo" data-user="brbcoding" data-default-tab="css" class='codepen'><pre><code>#faux-gif { 
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    margin: auto;
    
    background-image: url(http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif);
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
  
}</code></pre>
<p>See the Pen <a href='http://codepen.io/brbcoding/pen/gqxEo'>gqxEo</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>
</div>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>


<p>So, the cool part about this is that we are using <code>background-image</code>. The background image can be animated with keyframes. Therefore, we can use keyframes to change the url of the <code>background-image</code>! Just make sure to call the animation from within your <code>#faux-gif</code>&hellip; You can read more about keyframes on the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes">MDN Site</a>.</p>

<p>A trivial example using just two images might be something like this. Note the `animation: giffy 0.5s infinite linear. That&rsquo;s how we make the animation actually run. 0.5s will be the duration of our animation called &ldquo;giffy&rdquo;, it will run indefinitely, and it will have a linear timing function (as opposed to ease, ease-in-out, etc&hellip;):</p>

<div data-height="268" data-theme-id="2905" data-slug-hash="urHce" data-user="brbcoding" data-default-tab="css" class='codepen'><pre><code>#faux-gif {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    margin: auto;
    background-image: url(http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif);
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
    width: 300px;
    height: 300px;
    animation: giffy 0.5s infinite linear;
}


@keyframes giffy {
    from   { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif&#x27;); } 
    to { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;fx5wUNY.gif&#x27;); }
}</code></pre>
<p>See the Pen <a href='http://codepen.io/brbcoding/pen/urHce'>urHce</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>
</div>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>


<p>We have an almost-gif now&hellip; We just need to add the other frames. The cool part about keyframes is that you can use percentages instead of <code>to{ } ... from{ }</code>. Let&rsquo;s see how many we will need&hellip; We have 8 frames total, and 100% duration to work with. You may first think that you&rsquo;ll work in increments of 12.5%. That would be fine, but we haven&rsquo;t taken into account that our first frame is already taken care of with the initial state. That&rsquo;s the value we&rsquo;ll use at 0%. Instead, we&rsquo;ll want to do 100 / 7 (rounded to something simple to work with)&hellip; I&rsquo;ll just use 14.25%. Now, we&rsquo;ll create keyframes from 0% &ndash; ~100% in increments of 14.25%.</p>

<div data-height="268" data-theme-id="2905" data-slug-hash="Kiumf" data-user="brbcoding" data-default-tab="css" class='codepen'><pre><code>#faux-gif {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    margin: auto;
    background-image: url(http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif);
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
    width: 300px;
    height: 300px;
    animation: giffy 0.5s infinite linear;
}

#faux-gif:hover {
    animation-play-state:paused;
}

@keyframes giffy {
    0%   { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif&#x27;); } 
    14.25%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;JIi0uul.gif&#x27;); }
    28.5%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;owNGnNN.gif&#x27;);}
    42.75%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;2Ii6XOz.gif&#x27;); }
    57%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;ZmQBrQ5.gif&#x27;); }
    71.25%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;iAsfHyY.gif&#x27;); }
    85.5%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;AJwRblj.gif&#x27;); }
    99.75% { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;fx5wUNY.gif&#x27;); }
}</code></pre>
<p>See the Pen <a href='http://codepen.io/brbcoding/pen/Kiumf'>Kiumf</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>
</div>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>


<p>And that&rsquo;s about it. You can play with the animation timing, the duration, etc&hellip; You couldn&rsquo;t do that with your .gif, now could you? You&rsquo;ll see that I also added a <code>:hover</code> state. That was to satisfy the requirements of the Stack Overflow post I was solving with this technique. Thanks for checking it out, please let me know what mistakes I have made, and say hi <a href="https://twitter.com/CodyHenshaw">@CodyHenshaw</a> on twitter.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[CSS Variables in Firefox - AKA Variable Verbosity]]></title>
    <link href="http://brbcoding.github.io/blog/2013/12/16/css-variables-in-firefox-aka-variable-verbosity/"/>
    
    <updated>2013-12-16T09:04:09-05:00</updated>
    <id>http://brbcoding.github.io/blog/2013/12/16/css-variables-in-firefox-aka-variable-verbosity</id>
    
    <content type="html"><![CDATA[<p>So, I saw this tweet from <a href="https://twitter.com/codepo8">Chris Heilmann</a>.</p>

<blockquote class="twitter-tweet" lang="en"><p>CSS Variables in Firefox Nightly 29: <a href="http://t.co/sEFrYiURjq">http://t.co/sEFrYiURjq</a> via <a href="https://twitter.com/YouTube">@YouTube</a></p>&mdash; Christian Heilmann (@codepo8) <a href="https://twitter.com/codepo8/statuses/411692052993159168">December 14, 2013</a></blockquote>


<script async src="http://brbcoding.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<p>Awesome&hellip; maybe. I grabbed a fresh copy of FF Nightly and got to playing. The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables">MDN Docs</a> give a couple of examples&hellip; Here&rsquo;s another.</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/pfyqn/embedded/css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p></p>

<p>So, in this example, we don&rsquo;t use any variables at all. We do, however, repeat the color <code>#bada55</code> <strong>FOUR</strong> times. I&rsquo;m primarily a backend developer, and this redundancy kind of gives me the chills&hellip; Thanks to CSS Variables, however, we can eliminate some of this repetition. Here&rsquo;s another example, this time using variables&hellip; (Keep in mind, this will only work in Firefox 29 Nightly at the moment.)</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/pfyqn/2/embedded/css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p></p>

<p>Pretty cool, right? It&rsquo;s not exactly <em>shorter</em>, but it is nice not having to remember hex values or color names&hellip;</p>

<p>The title of this post included something along the lines of &ldquo;Variable Verbosity&rdquo;, and that&rsquo;s not to discount the addition of variable support into browsers. I think it&rsquo;s awesome that the web is moving forward, just don&rsquo;t go throwing away your Sass or Less install just yet (obviously these tools do WAY more than just add variables). Here&rsquo;s how variables look when you use preprocessors vs. firefox&rsquo;s implementation (merely to show differences in implementation).</p>

<h4>Sass</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">$</span><span class="nt">foo</span><span class="o">:</span> <span class="nf">#000000</span><span class="o">;</span>
</span><span class='line'><span class="nc">.bar</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="err">$</span><span class="n">foo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Less</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@foo</span><span class="o">:</span> <span class="nf">#000000</span><span class="p">;</span>
</span><span class='line'><span class="nc">.bar</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="o">@</span><span class="n">foo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>FF 29</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* invalid if not scoped */</span>
</span><span class='line'><span class="nd">:root</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span><span class="o">-</span><span class="n">foo</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.bar</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="n">var</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Well, that about does it for this article. As you can see, the native implementation is much longer than the preprocessing variants, but hey, at least we&rsquo;re moving forward. I&rsquo;ll mess around with it a bit more, and see if I can come up with some cool stuff that shows that these are actually useful (beyond the evident use). If I&rsquo;ve got any errors (which is not unlikely), please shoot me a note <a href="https://twitter.com/CodyHenshaw">@CodyHenshaw</a> on twitter. Thanks for stopping by!</p>

<h4>December 17, 2013 - Update: </h4>


<p>So, after publishing this, something was brought to my attention. I had totally disregarded the concept of scope in this post, which is definitely one of the things that Mozilla did right with their variables. Scoped variables are helpful because they allow you to &ldquo;silo&rdquo; variables for use in specific parts of an application, or even declare them globally to be used throughout an application (in this case, a stylesheet). So, without further ado, let&rsquo;s get to scope.</p>

<p>Scoping variables is trivial in both the Mozilla implementation, and with CSS preprocessors, like Sass. Here&rsquo;s what it looks like with CSS (again, only works in FF 29 at the time of writing).</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/CHxsK/embedded/css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Here&rsquo;s how you do it with Sass&hellip; (You could also define a mixin with vars, and use them wherever you need to)</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/n7frz/1/embedded/css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Either method works. Just wanted to throw this out there to show the scope capabilities of both native CSS and Sass. If someone wants to give me a Less example, I&rsquo;d be happy to put it out there too. Thanks.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Shorthand Function Queues with JavaScript]]></title>
    <link href="http://brbcoding.github.io/blog/2013/12/12/a-function-queue/"/>
    
    <updated>2013-12-12T10:47:36-05:00</updated>
    <id>http://brbcoding.github.io/blog/2013/12/12/a-function-queue</id>
    
    <content type="html"><![CDATA[<p>This is a short post explaining the line that blew my mind from John Resig&rsquo;s <a href="http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/">Secrets of the JavaScript Ninja</a>. It turns out that it&rsquo;s a cool shorthand way of iterating over and calling multiple (anonymous) functions from a queue. The following is the function in question.</p>

<figure class='code'><figcaption><span>queue.js mark:3,3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">paused</span> <span class="o">&amp;&amp;</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">paused</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">resume</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go ahead and break it out of the original function so that we can see what&rsquo;s actually happening (this block comes from a big test suite, so that&rsquo;s not helpful in this concise example). So, this is what we will be looking at:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we get into the queue part though, let&rsquo;s take a gander at the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"><code>shift()</code></a> function.</p>

<blockquote><p>The shift method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value.</p></blockquote>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// create an array</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arrToShift</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="c1">// shift returns the value it removes, so let&#39;s log that</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arrToShift</span><span class="p">.</span><span class="nx">shift</span><span class="p">())</span> <span class="c1">// 1</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arrToShift</span><span class="p">)</span> <span class="c1">// [ 2, 3, 4, 5 ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not so useful yet? Ok&hellip; how about if we replace the array of integers with an array of functions?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">queue</span> <span class="o">=</span> <span class="p">[</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s1">&#39;foo&#39;</span> <span class="p">},</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s1">&#39;bar&#39;</span> <span class="p">},</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s1">&#39;bat&#39;</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">())</span> <span class="c1">// [Function]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So our <code>shift()</code> did exactly what it did in the first example. It removed <em>and</em> returned the value at queue[0], which in this case, was a function. How do we run a function in javascript? By appending <code>()</code> to the function, of course! So, now check this out&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()())</span> <span class="c1">// foo</span>
</span><span class='line'><span class="c1">// woohoo! we returned that first function and ran it</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should now be able to see how we could use this as I mentioned earlier. Let&rsquo;s run ALL of our functions in the queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sLen</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// starting queue length</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sLen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// foo</span>
</span><span class='line'><span class="c1">// bar</span>
</span><span class='line'><span class="c1">// bat</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s kind of long though, and this was about shorthand&hellip; SO, we can use <code>shift()</code> to our advantage here as well. Since the 0th element is REMOVED from the array, we should be able to just check if there is something at the 0th index. If so, we can keep going. This is the shorter version that I came up with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">while</span><span class="p">(</span><span class="nx">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()());</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// while anything is at the 0th index, continue running</span>
</span><span class='line'><span class="c1">// foo</span>
</span><span class='line'><span class="c1">// bar</span>
</span><span class='line'><span class="c1">// bat</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool, right? We could also accomplish a queue-like system with <code>map()</code>, something like <code>queue.map(function(x){ console.log(x()) })</code>&hellip; That&rsquo;s a different story though. Hopefully you took something away from this post&hellip; Feel free to catch up with me (or point out errors) on twitter <a href="https://twitter.com/CodyHenshaw">@CodyHenshaw</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Creating loading spinners with pure CSS]]></title>
    <link href="http://brbcoding.github.io/blog/2013/12/05/creating-loading-spinners-with-pure-css-scss/"/>
    
    <updated>2013-12-05T17:54:14-05:00</updated>
    <id>http://brbcoding.github.io/blog/2013/12/05/creating-loading-spinners-with-pure-css-scss</id>
    
    <content type="html"><![CDATA[<h3>The HTML</h3>


<hr />


<br />


<p>HTML is pretty minimal in this example&hellip; We can create the simplest of loading spinners with just one single DOM element. Here&rsquo;s how it looks:</p>

<figure class='code'><figcaption><span>spinner.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;spinner&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all the HTML we need to create our spinner.</p>

<h3>The CSS</h3>


<hr />


<br />


<h3>Creating the Shape</h3>


<br />


<figure class='code'><figcaption><span>spinner.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.spinner</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span>  <span class="m">5em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">5em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-top</span><span class="o">:</span>    <span class="m">0.75em</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span>   <span class="m">0.75em</span> <span class="k">solid</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span>  <span class="m">0.75em</span> <span class="k">solid</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">0.75em</span> <span class="k">solid</span> <span class="nb">orange</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The width and the height are up to you. To make a circle, they need to be the same (obviously). I&rsquo;ll be using borders to create a &ldquo;donut&rdquo; shape. The border width can vary, but between 0.5 and 1 em seemed to look good here. Then, we round the (currently square) div by giving it a <code>border-radius</code> of 50%.</p>

<h3>Animating the Shape</h3>


<br />


<p><strong>Disclaimer:</strong> Your mileage may vary on the vendor prefixes. I generally use compass w/ Sass or <a href="http://lea.verou.me/prefixfree/">Lea Verou&rsquo;s Prefix Free</a>, so most of these prefixes were looked up and not totally tested across all browsers.</p>

<figure class='code'><figcaption><span>spinner.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.spinner</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* previous shape omitted */</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">spin</span> <span class="m">2s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span>    <span class="n">spin</span> <span class="m">2s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span>      <span class="n">spin</span> <span class="m">2s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span>         <span class="n">spin</span> <span class="m">2s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-webkit-keyframes</span> <span class="nt">spin</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-moz-keyframes</span> <span class="nt">spin</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-o-keyframes</span> <span class="nt">spin</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">spin</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The spinning animation is actually very simple. Using <code>keyframes</code>, we can simply transform our shape 360 degrees in the amount of time specified in the <code>animation</code>. You can play with the different easing functions (<code>linear, ease, cubic-bezier(), ...</code>) and choose which animation you like best.</p>

<h3>The Demo</h3>


<h4>(May need a refresh to see spinning)</h4>


<p data-height="268" data-theme-id="2905" data-slug-hash="Jpums" data-user="brbcoding" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/brbcoding/pen/Jpums'>Jpums</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>




<h3>Just for fun&#8230; No extra html, just the body element and pseudo-elements</h3>


<h4>(May need a refresh to see spinning)</h4>


<p>Keep in mind, this isn&rsquo;t very practical. You <em>could</em> add a class to the body and work off of that and make it slightly better, but you&rsquo;re probably better off just creating an element and hiding it until you need it.<br/>
This demo uses prefix free as well as Sass (Scss syntax).</p>

<figure class='code'><figcaption><span>spinner.scss &#8220;`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$gray</span><span class="o">:</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="mf">.75</span><span class="p">);</span>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">5</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">5</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="na">position</span><span class="o">:</span> <span class="no">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="na">top</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span> <span class="na">bottom</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span> <span class="na">right</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span> <span class="na">left</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="na">margin</span><span class="o">:</span> <span class="no">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="na">border-top</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">rem</span> <span class="no">solid</span> <span class="nv">$gray</span><span class="p">;</span>
</span><span class='line'>  <span class="na">border-right</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.25</span><span class="kt">rem</span> <span class="no">solid</span> <span class="no">transparent</span><span class="p">;</span>
</span><span class='line'>  <span class="na">border-left</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">rem</span> <span class="no">solid</span> <span class="nv">$gray</span><span class="p">;</span>
</span><span class='line'>  <span class="na">border-radius</span><span class="o">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>  <span class="na">animation</span><span class="o">:</span> <span class="n">spin</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">spin</span> <span class="p">{</span>
</span><span class='line'>   <span class="nt">100</span><span class="err">%</span> <span class="p">{</span> <span class="na">transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">360</span><span class="kt">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using only 3 borders, we are able to create a different type of spinner. The <code>border-radius</code> again creates the rounded shape of the spinner. The <code>keyframes</code> just rotate the pseudo-element 360 degrees over the duration of the <code>animation</code>. With a <code>linear</code> easing function, we create a smooth spinning effect.</p>

<p data-height="252" data-theme-id="2905" data-slug-hash="axyDz" data-user="brbcoding" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/brbcoding/pen/axyDz'>axyDz</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>


<p>Now you should have an awesome spinner&hellip; Play around with different animations, directions, colors, etc&hellip; to make it your own. You can also use pseudo-elements to create multiple spinner shapes, positioned absolutely on top of one another. This can create a cool effect as well. That&rsquo;s beyond the scope of this post, but here&rsquo;s you can see this in action <a href="http://codepen.io/brbcoding/full/pLxgF">here</a>. Thanks for stopping by and feel free to say hi @CodyHenshaw.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Icon fonts and pseudo-elements: They were made for one another.]]></title>
    <link href="http://brbcoding.github.io/blog/2013/09/15/icon-fonts-and-pseudo-elements-a-love-story/"/>
    
    <updated>2013-09-15T15:07:21-04:00</updated>
    <id>http://brbcoding.github.io/blog/2013/09/15/icon-fonts-and-pseudo-elements-a-love-story</id>
    
    <content type="html"><![CDATA[<p>Using icon fonts with pseudo-elements is ridiculously easy. Choosing between icon font sets will take a lot longer than the actual implementation. I&rsquo;ll give an example below with some icons from the super popular <strong><a href="http://fortawesome.github.io/Font-Awesome/">font awesome</a></strong> set. We will import the icons from <strong><a href="http://twitter.com/TimPietrusky">@TimPietrusky&rsquo;s</a></strong> always useful, <strong><a href="http://weloveiconfonts.com/">weloveiconfonts</a></strong>.</p>




<pre class="codepen" data-height="300" data-type="css" data-href="KwHkf" data-user="brbcoding"><code> </code></pre>




<script async src="http://codepen.io:/assets/embed/ei.js"></script>




<h3>Locating the values to use for each icon</h3>




<p>I personally run Chrome in my day-to-day, so I generally use devtools for a lot of my testing&hellip; Here are some screenshots illustrating the &ldquo;look up&rdquo; process for these icon fonts. We will start by looking at the <strong><a href="http://fortawesome.github.io/Font-Awesome/icons/">Cheat Sheet</a></strong> on the font awesome github page.</p>




<p>First, select an icon font. You&rsquo;ll be taken to the corresponding page which displays that icon in different sizes. From here, there are two ways we can go about finding the actual unicode value.</p>




<ol>
<li>It will be displayed in light gray next to the icon font&rsquo;s title.
<img src="http://i.imgur.com/2OnWpUg.png" alt="Unicode 1" /></li>
<li>More commonly, you&rsquo;ll need to check out the source to find out the corresponding unicode. To do this, right click an icon font and click <code>inspect element</code>. You may have to scroll a bit to find it, but in the styles view on the right-hand side, you&rsquo;ll find a css declaration that looks very similar to the example we used before.<br/>
<img src="http://i.imgur.com/AHX5sRC.png" alt="Unicode 2" /></li>
</ol>




<p><em>That&rsquo;s it! We can put icon fonts <strong>everywhere</strong> now! (don&rsquo;t do that, seriously.)</em></p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Creating and connecting to an EC2 instance on Amazon AWS]]></title>
    <link href="http://brbcoding.github.io/blog/2013/08/08/creating-and-connecting-to-an-ec2-instance-on-amazon-aws/"/>
    
    <updated>2013-08-08T15:04:26-04:00</updated>
    <id>http://brbcoding.github.io/blog/2013/08/08/creating-and-connecting-to-an-ec2-instance-on-amazon-aws</id>
    
    <content type="html"><![CDATA[<h3>Prerequisites:</h3>




<ul>
<li><a href="http://aws.amazon.com/">Amazon Web Services (AWS) Account</a></li>
<li><a href="http://en.wikipedia.org/wiki/Secure_Shell%20Client">SSH</a> (I will be using <a href="http://www.cygwin.com/">Cygwin</a> w/ SSH)</li>
</ul>




<h3>Creating a new AWS EC2 Instance</h3>




<p>At this point, I will assume that you have created an account with Amazon Web Services (AWS) and have also installed some kind of SSH client. There are numerous available, but I chose to use Cygwin, since it was already installed on my machine.</p>




<p>After you&rsquo;ve completed these prerequisites, let&rsquo;s get started. First, you&rsquo;ll want to sign into your AWS account, and head to your AWS management console.</p>




<p><img src="http://i.imgur.com/isw0e79.png" alt="AWS Screenshot 1" /></p>




<p>We will be creating a new EC2 instance. Select EC2 from the Compute &amp; Networking category. Other types of AWS services will be explored in future blog posts.</p>




<p><img src="http://i.imgur.com/G5NcOji.png" alt="AWS Screenshot 2" /></p>




<p>From here, click the <strong>Launch Instance</strong> button, which will take you to the EC2 wizard.</p>




<p><img src="http://i.imgur.com/Ms81htV.png" alt="AWS Screenshot 3" /></p>




<!--more-->




<p>In this example, we will be setting up Ubuntu 12.04.2 on our AWS instance.</p>




<ol>
<li>Select the <strong>Quick Launch Wizard</strong> radio button so we can get up and running as quickly as possible.</li>
<li>Name your Instance. This is optional, but will be helpful if you have many instances. You can leave this blank for now (or fill it in if you desire).</li>
<li>Now we will choose the type of operating system for our instance. We will be using <strong>Ubuntu Server 12.04.2 LTS &ndash; 64bit</strong> in this example. Select <strong>Ubuntu Server 12.04.2 LTS</strong> from the list of operating systems.</li>
<li>Now that we have selected an OS, we can generate our key pair. This key pair will later be used to authenticate your local machine when connecting to your instance. To create the <code>.pem</code> file, we will need to fill in a name for the key. I have named mine aws in the screenshot.</li>
<li>Now we can download the <code>.pem</code> file by clicking the Download button (after you&rsquo;ve chosen a name). The key&rsquo;s name will be <code>name-from-step4.pem</code>. Keep in mind where this file is being saved to on your local machine. We will need this location later.</li>
</ol>




<p><img src="http://i.imgur.com/tMHvd5l.png" alt="AWS Screenshot 4" /></p>




<p>Now that you&rsquo;ve downloaded your <code>.pem</code> file, you should be able to continue. If not, try re-downloading the key and then proceed.</p>




<p>You will now be taken to a screen which displays the details of our instance. From here, we can click the <strong>Launch</strong> button to proceed.
<img src="http://i.imgur.com/8hRwy7q.png" alt="AWS Screenshot 5" /></p>




<p>You should now see a dialog box which shows <strong>Your instance is now launching.</strong> Keep note of the instance number that is displayed in the top left corner. Mine displays <code>i-f41b22c1</code>. Close this dialog box to continue.</p>




<p><img src="http://i.imgur.com/cM4wB5w.png" alt="AWS Screenshot 6" /></p>




<p>You will now be taken to your list of instances. As you can see, I already have two other instances running at the moment. The following numbered list corresponds to the numbers in the screenshot below.</p>




<ol>
<li>The <strong>Instances</strong> tab on your sidebar will give you easy access to this page. Remember where it is located.</li>
<li>This is the refresh button.</li>
<li>This is the state column. The possible states are <strong>pending</strong>, <strong>running</strong>, <strong>shutting-down</strong>, <strong>terminated</strong>, <strong>stopping</strong>, and <strong>stopped</strong>. Use the refresh button outlined in the previous step to refresh the page until your instance&rsquo;s state reads <strong>running</strong>.</li>
<li>This is your public DNS. Copy this address and store it in an easily accessible place. Mine reads <code>ec2-54-218-70-43.us-west-2.compute.amazonaws.com</code>. Yours will be different.</li>
</ol>




<p><img src="http://i.imgur.com/CCfKIdR.png" alt="AWS Screenshot 7" /></p>




<p><strong>That&rsquo;s It! You&rsquo;ve successfully created a new EC2 instance and are running in the cloud! Not much we can do from here though, so let&rsquo;s get started with SSHing to this instance</strong></p>




<h3>SSHing to your new AWS EC2 Instance</h3>




<p>Now that we have successfully spun up a new EC2 instance, we can go ahead and connect to it&hellip; Fire up your SSH client (I&rsquo;ll be using <a href="http://www.cygwin.com/">Cygwin</a> with SSH installed) and let&rsquo;s get started.</p>




<p>Typing <code>ssh</code> into the terminal window will bring up usage tips for the <code>ssh</code> command. The command we will be using to connect will look something like this:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -iv privatekeyfile.pem user@publicdns.amazonaws.com</span></code></pre></td></tr></table></div></figure>




<ul>
<li>The <code>ssh</code> command tells the terminal to create a new SSH session.</li>
<li>The <code>-i</code> is an argument passed to <code>ssh</code> which tells the shell to use the file after the arguments as the identification file, and the <code>v</code> tells the shell to output in verbose mode. Verbose mode is useful for debugging and will help us to troubleshoot if we have issues connecting.</li>
<li>The <code>privatekeyfile.pem</code> is the file that we downloaded before launching our AWS instance. We will need this to connect to the instance.</li>
<li><code>user@publicdns.amazonaws.com</code> is the public DNS of the server we want to connect to (our AWS instance, in this case).</li>
</ul>




<p>Now that you know what this command is doing, let&rsquo;s run it with our own private key and public dns&hellip;</p>




<p>Because I am using Cygwin, I will have to move my public key from wherever I downloaded it before to the correct Cygwin directory.</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp C:/Users/chenshaw/Downloads/aws.pem /cygwin/home/chenshaw/ .</span></code></pre></td></tr></table></div></figure>




<p>The command <code>cp</code> will copy the file from <code>C:/Users/chenshaw/Downloads/aws.pem</code> to <code>/cygwin/home/chenshaw</code>. Now that we have our private key in the correct place, we should be able to run the <code>ssh</code> command.</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -2 -vi aws.pem ubuntu@ec2-54-218-70-43.us-west-2.compute.amazonaws.com</span></code></pre></td></tr></table></div></figure>




<p>After running this command, you&rsquo;ll see some debug information and then finally a question like this:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The authenticity of host 'ec2-54-218-70-43.us-west-2.compute.amazonaws.com (54.218.70.43)' can't be established.
</span><span class='line'>ECDSA key fingerprint is a1:3b:50:fb:fc:2c:ed:9d:b1:13:41:74:10:91:7b:52.
</span><span class='line'>// now type yes to continue.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes</span></code></pre></td></tr></table></div></figure>




<p>Was your connection successful? Mine wasn&rsquo;t&hellip; Here&rsquo;s what I saw:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
</span><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>Permissions 0644 for 'aws.pem' are too open.
</span><span class='line'>It is required that your private key files are NOT accessible by others.
</span><span class='line'>This private key will be ignored.
</span><span class='line'>bad permissions: ignore key: aws.pem
</span><span class='line'>debug1: No more authentication methods to try.
</span><span class='line'>Permission denied (publickey).</span></code></pre></td></tr></table></div></figure>




<p>Pretty simple error message, right? Because our private key file&rsquo;s permissions are too open, we are not allowed to connect. Let&rsquo;s fix that.</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod -v 0400 aws.pem
</span><span class='line'>mode of `aws.pem' changed from 0644 (rw-r--r--) to 0400 (r--------)</span></code></pre></td></tr></table></div></figure>




<p>The <code>chmod</code> command changes access to files. Discussing <code>chmod</code> is beyond the scope of this article, so for now, let&rsquo;s just use <code>0400</code>&hellip; Now that we&rsquo;ve secured our <code>.pem</code> file, let&rsquo;s try connecting again.</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -2 -vi aws.pem ubuntu@ec2-54-218-70-43.us-west-2.compute.amazonaws.com
</span><span class='line'>
</span><span class='line'>debug1: Entering interactive session.
</span><span class='line'>Welcome to Ubuntu 12.04.2 LTS (GNU/Linux 3.2.0-40-virtual x86_64)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>
</span><span class='line'>  System information as of Thu Jun 27 13:05:09 UTC 2013
</span><span class='line'>
</span><span class='line'>  System load:  0.0               Processes:           58
</span><span class='line'>  Usage of /:   12.1% of 7.87GB   Users logged in:     0
</span><span class='line'>  Memory usage: 32%               IP address for eth0: 172.31.34.225
</span><span class='line'>  Swap usage:   0%
</span><span class='line'>
</span><span class='line'>  Graph this data and manage this system at https://landscape.canonical.com/
</span><span class='line'>
</span><span class='line'>  Get cloud support with Ubuntu Advantage Cloud Guest:
</span><span class='line'>    http://www.ubuntu.com/business/services/cloud
</span><span class='line'>
</span><span class='line'>  Use Juju to deploy your cloud instances and workloads:
</span><span class='line'>    https://juju.ubuntu.com/#cloud-precise
</span><span class='line'>
</span><span class='line'>50 packages can be updated.
</span><span class='line'>21 updates are security updates.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>The programs included with the Ubuntu system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
</span><span class='line'>applicable law.
</span><span class='line'>
</span><span class='line'>To run a command as administrator (user "root"), use "sudo &lt;command>".
</span><span class='line'>See "man sudo_root" for details.
</span><span class='line'>
</span><span class='line'>ubuntu@ip-172-31-34-225:~$</span></code></pre></td></tr></table></div></figure>




<p><strong>Looks like we&rsquo;ve connected successfully! Congratulations, and welcome to the cloud. Ask your questions in the comments or feel free to connect with me @CodyHenshaw on twitter. Thanks for stopping by!</strong></p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[pinflickr - some kind of wordpress pinboard plugin]]></title>
    <link href="http://brbcoding.github.io/blog/2013/08/05/pinflickr-some-kind-of-wordpress-pinboard-plugin/"/>
    
    <updated>2013-08-05T15:09:27-04:00</updated>
    <id>http://brbcoding.github.io/blog/2013/08/05/pinflickr-some-kind-of-wordpress-pinboard-plugin</id>
    
    <content type="html"><![CDATA[<p>I have just completed the first version of my &ldquo;Pinflickr&rdquo; plugin which automatically generates a pinboard styled gallery. Below is a paste of the Readme file located in the git repo. Full write-up coming soon.</p>




<p><a href="https://github.com/brbcoding/pinflickr/tree/master/wp-pinflickr">Full Source on Github</a></p>




<p>This plugin uses the Flickr API to build a pinboard style gallery on an existing Wordpress site.</p>




<p>Examples:</p>




<p><img src="http://i.imgur.com/DxAHfvp.jpg" alt="Screenshot 1" />
<img src="http://i.imgur.com/vzB3ljs.jpg" alt="Screenshot 2" /></p>




<h1>Installation</h1>




<ul>
<li>Move wp-pinflickr folder to the <code>plugins</code> directory of your Wordpress site.</li>
<li>Create a new API code and app secret on flickr <a href="http://www.flickr.com/services/developer/api/">More Info</a></li>
<li>Access <em>Pinflickr Settings</em> under the <em>Settings</em> menu inside the Wordpress Admin Menu.</li>
<li>Enter your API code and App Secret from Flickr. Save these changes.</li>
<li>Create a new page that will hold your gallery</li>
<li>The plugin works with a shortcode to display the gallery. The format is as follows:</li>
</ul>




<p><code>[pinflickr user_id="66956608@N06" tags="tags,separated,by,commas"]</code></p>




<p>The easiest way to find a user id is by using the site <a href="http://idgettr.com/">idGettr</a>.</p>




<ul>
<li>Enter the shortcode with your <code>user_id</code> and desired <code>tags</code> and save this page.</li>
<li>That&rsquo;s it! You&rsquo;ve created an awesome pinboard styled gallery!</li>
</ul>




<p><em>Working Demo Coming Soon</em></p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[SublimeText 2 Keybindings Cheatsheet]]></title>
    <link href="http://brbcoding.github.io/blog/2013/05/12/sublimetext-2-keybindings-cheatsheet/"/>
    
    <updated>2013-05-12T15:00:38-04:00</updated>
    <id>http://brbcoding.github.io/blog/2013/05/12/sublimetext-2-keybindings-cheatsheet</id>
    
    <content type="html"><![CDATA[<p>Migrating this post from my old blog&hellip; These keybindings are still relevant though.</p>

<h3>General</h3>




<h4>Files</h4>




<p><code>Ctrl</code> + <code>Shift</code> + <code>n</code> &ndash; New Window<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>w</code> &ndash; Close Window<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>t</code> &ndash; Reopen Last File<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>s</code> &ndash; Save File As Prompt<br/>
<code>Ctrl</code> + <code>w</code> &ndash; Close Current File<br/>
<code>Ctrl</code> + <code>o</code> &ndash; Open File Prompt<br/>
<code>Ctrl</code> + <code>n</code> &ndash; New File<br/>
<code>Ctrl</code> + <code>s</code> &ndash; Save</p>




<h4>Views</h4>




<p><code>Ctrl</code> + <code>k</code> + <code>b</code> &ndash; Toggle Sidebar<br/>
<code>F11</code> &ndash; Toggle Fullscreen<br/>
<code>Shift</code> + <code>F11</code> &ndash; Toggle Distraction Free<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>p</code> &ndash; Command Prompt<br/>
<code>Alt</code> + <code>Shift</code> + <code>2</code> &ndash; Split View into Two Columns<br/>
<code>Alt</code> + <code>Shift</code> + <code>1</code> &ndash; Revert to One Column<br/>
<code>Alt</code> + <code>Shift</code> + <code>5</code> &ndash; Set to Grid View<br/>
<code>Ctrl</code> + <code>[NUM]</code> &ndash; Jump to Group Where <code>[NUM]</code> is 1-4<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>[NUM]</code>  &ndash; Move File to Specified Group Where <code>[NUM]</code> is 1-4</p>




<!-- more -->




<h4>Editing</h4>




<p><code>Ctrl</code> + <code>a</code> &ndash; Select All<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>m</code> &ndash; Select All Content in Current Parentheses<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>d</code> &ndash; Duplicate Lines<br/>
<code>Ctrl</code> + <code>m</code> &ndash; Jump to Closing Parenthesis<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>l</code> &ndash; Split Selection to Lines<br/>
<code>Ctrl</code> + <code>d</code> &ndash; Select Word; Repeat for Next Occurences<br/>
<code>Backspace</code> or <code>Shift</code> + <code>Backspace</code> or <code>Ctrl</code> + <code>Shift</code> + <code>Backspace</code> &ndash; Left Delete<br/>
<code>Delete</code> &ndash; Right Delete<br/>
<code>Enter</code> or <code>Shift</code> + <code>Enter</code> &ndash; Insert Newline<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>Enter</code> &ndash; Insert Newline After<br/>
<code>Ctrl</code> + <code>j</code> &ndash; Join Line Below to End of Current Line<br/>
<code>Ctrl</code> + <code>]</code> &ndash; Indent Lines<br/>
<code>Ctrl</code> + <code>[</code> &ndash; De-indent Lines<br/>
<code>Ctrl</code> + <code>z</code> &ndash; Undo<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>z</code> or <code>Ctrl</code> + <code>y</code> &ndash; Redo<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>v</code> &ndash; Paste and Indent<br/>
<code>Shift</code> + <code>Delete</code> or <code>Ctrl</code> + <code>x</code> &ndash; Cut<br/>
<code>Ctrl</code> + <code>Insert</code> or <code>Ctrl</code> + <code>c</code> &ndash; Copy<br/>
<code>Shift</code> + <code>Insert</code> or <code>Ctrl</code> + <code>v</code> &ndash; Paste<br/>
<code>Ctrl</code> + <code>k</code> + <code>k</code> or <code>Ctrl</code> + <code>x</code> &ndash; Delete from Cursor to EOL<br/>
<code>Ctrl</code> + <code>k</code> + <code>Backspace</code> &ndash; Delete from Cursor to BOL<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>Up OR Down</code> &ndash; Move Selected Up or Down<br/>
<code>Ctrl</code> + <code>Space</code> &ndash; Select Next Auto-Complete Suggestion<br/>
<code>Ctrl</code> + <code>k</code> + <code>u</code> &ndash; Transform to Uppercase<br/>
<code>Ctrl</code> + <code>k</code> + <code>l</code> &ndash; Transform to Lowercase</p>




<h4>Navigation</h4>




<p><code>Left</code> or <code>Shift</code> + <code>Left</code> &ndash; Move Left (By Characters)<br/>
<code>Right</code> or <code>Shift</code> + <code>Right</code> &ndash; Move Right (By Characters)<br/>
<code>Up</code> or <code>Shift</code> + <code>Up</code> &ndash; Move Up (By Lines)<br/>
<code>Down</code> or <code>Shift</code> + <code>Down</code> &ndash; Move Down (By Lines)<br/>
<code>Ctrl</code> + <code>Left</code>  or <code>Ctrl</code> + <code>Shift</code> + <code>Left</code>  &ndash; Move Left (By Words)<br/>
<code>Ctrl</code> + <code>Right</code> or <code>Ctrl</code> + <code>Shift</code> + <code>Right</code> &ndash; Move Right (By Word Ends)<br/>
<code>Alt</code> + <code>Left</code> or <code>Alt</code> + <code>Shift</code> + <code>Left</code> &ndash; Move Left (By Subwords)<br/>
<code>Alt</code> + <code>Right</code> or <code>Alt</code> + <code>Shift</code> + <code>Right</code> &ndash; Move Right (By Subword Ends)<br/>
<code>Page Up</code> or <code>Shift</code> + <code>Page Up</code> &ndash; Next Page<br/>
<code>Page Down</code> or <code>Shift</code> + <code>Page Down</code> &ndash; Previous Page<br/>
<code>Home</code> or <code>Shift</code> + <code>Home</code> &ndash; Move to Beginning of Line<br/>
<code>End</code> or <code>Shift</code> + <code>End</code> &ndash; Move to End of Line<br/>
<code>Ctrl</code> + <code>Home</code> or <code>Ctrl</code> + <code>Shift</code> + <code>Home</code> &ndash;  Move to Beginning of File<br/>
<code>Ctrl</code> + <code>End</code> or <code>Ctrl</code> + <code>Shift</code> + <code>End</code> &ndash; Move to End of File</p>




<h4>Goto</h4>




<p><code>Ctrl</code> + <code>p</code> &ndash; Quick Open Files by Name<br/>
<code>Ctrl</code> + <code>r</code> &ndash; Goto Symbol<br/>
<code>Ctrl</code> + <code>;</code> &ndash; Goto Word in Current File<br/>
<code>Ctrl</code> + <code>g</code> &ndash; Goto Line in Current File</p>




<h4>Find and Replace</h4>




<p><code>Ctrl</code> + <code>f</code> &ndash; Open Find Menu<br/>
<code>Ctrl</code> + <code>h</code> &ndash; Open Find and Replace Menu<br/>
<code>Alt</code> + <code>r</code> &ndash; Toggle Regular Expression<br/>
<code>Alt</code> + <code>c</code> &ndash; Toggle Case Sensitive<br/>
<code>Alt</code> + <code>w</code> &ndash; Toggle Whole Word<br/>
<code>Alt</code> + <code>a</code> &ndash; Toggle Preserve Case<br/>
<code>F3</code> &ndash; Find<br/>
<code>Alt</code> + <code>Enter</code> &ndash; Find All<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>f</code> &ndash; Find in Files<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>a</code> &ndash; Replace<br/>
<code>Ctrl</code> + <code>Alt</code> + <code>Enter</code> &ndash; Replace All</p>




<h4>Tabs</h4>




<p><code>Ctrl</code> + <code>Shift</code> + <code>t</code> &ndash; Open Last Closed Tab<br/>
<code>Ctrl</code> + <code>Page Up</code> &ndash; Cycle Up Through Tabs<br/>
<code>Ctrl</code> + <code>Page Down</code> &ndash; Cycle Down Through Tabs</p>




<h4>Bookmarks</h4>




<p><code>Ctrl</code> + <code>F2</code> &ndash; Toggle Bookmark<br/>
<code>F2</code> &ndash; Next Bookmark<br/>
<code>Shift</code> + <code>F2</code> &ndash; Previous Bookmark<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>F2</code> &ndash; Clear Bookmarks</p>




<h4>Comments</h4>




<p><code>Ctrl</code> + <code>/</code> &ndash; Comment/Un-Comment a Line<br/>
<code>Ctrl</code> + <code>Shift</code> + <code>/</code> &ndash; Block Comment Selection</p>




<h3>Plugin Specific</h3>




<h4>Zen Coding/Emmet</h4>




<p><code>Ctrl</code> + <code>Alt</code> + <code>Enter</code> &ndash; Open Live Editor</p>

]]></content>
    
  </entry>
  
</feed>