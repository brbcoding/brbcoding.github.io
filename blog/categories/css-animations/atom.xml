<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css animations | Cody G. Henshaw]]></title>
  <link href="http://brbcoding.github.io/blog/categories/css-animations/atom.xml" rel="self"/>
  <link href="http://brbcoding.github.io/"/>
  <updated>2013-12-17T19:09:30-05:00</updated>
  <id>http://brbcoding.github.io/</id>
  <author>
    <name><![CDATA[Cody G. Henshaw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Faking an animated .gif with CSS keyframes]]></title>
    <link href="http://brbcoding.github.io/blog/2013/12/17/faux-animated-gifs-with-css3-keyframes/"/>
    <updated>2013-12-17T16:31:31-05:00</updated>
    <id>http://brbcoding.github.io/blog/2013/12/17/faux-animated-gifs-with-css3-keyframes</id>
    <content type="html"><![CDATA[<p>Animated gifs can be pretty impactful if used correctly. They can illustrate a point without having to embed a video or a wall of text. The issue with gifs is that they are just pictures. They can&rsquo;t be stopped or started (though many people fake it by swapping a static image). I ran across a question on Stack Overflow which asked for a solution to stop (by stop, I mean freeze and don&rsquo;t reset) a gif on <code>:hover</code> and resume on mouseout. JavaScript plugins were immediately suggested, which might be the correct solution to this problem&hellip; but let&rsquo;s try it with CSS animations anyway.</p>

<p>The first thing we will need to do is break our .gif into frames. There are tons of tools online that allow you to do this, and I&rsquo;d even guess that ImageMagick will do it for you as well. Here&rsquo;s the one I chose to start with:</p>

<p><img src="http://i.imgur.com/MxrP3DG.gif" alt="bananananana" /></p>

<p>I broke mine into 8 individual frames. Here they are:</p>

<p><img src="http://i.imgur.com/E2ee6fI.gif" alt="banana1" />
<img src="http://i.imgur.com/JIi0uul.gif" alt="banana2" />
<img src="http://i.imgur.com/owNGnNN.gif" alt="banana3" />
<img src="http://i.imgur.com/2Ii6XOz.gif" alt="banana4" />
<img src="http://i.imgur.com/ZmQBrQ5.gif" alt="banana5" />
<img src="http://i.imgur.com/iAsfHyY.gif" alt="banana6" />
<img src="http://i.imgur.com/AJwRblj.gif" alt="banana7" />
<img src="http://i.imgur.com/fx5wUNY.gif" alt="banana8" /></p>

<p>So, that&rsquo;s it for prep work&hellip; Let&rsquo;s get our html ready.</p>

<p>``` html</p>

<div id="faux-gif"></div>


<p>```</p>

<p>Yep, that&rsquo;s it&hellip; Now, let&rsquo;s add one of the images as a <code>background-image</code>.</p>

<div data-height="268" data-theme-id="2905" data-slug-hash="gqxEo" data-user="brbcoding" data-default-tab="css" class='codepen'><pre><code>#faux-gif { 
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    margin: auto;
    
    background-image: url(http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif);
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
  
}</code></pre>
<p>See the Pen <a href='http://codepen.io/brbcoding/pen/gqxEo'>gqxEo</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>
</div>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>


<p>So, the cool part about this is that we are using <code>background-image</code>. The background image can be animated with keyframes. Therefore, we can use keyframes to change the url of the <code>background-image</code>! Just make sure to call the animation from within your <code>#faux-gif</code>&hellip; You can read more about keyframes on the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes">MDN Site</a>.</p>

<p>A trivial example using just two images might be something like this. Note the `animation: giffy 0.5s infinite linear. That&rsquo;s how we make the animation actually run. 0.5s will be the duration of our animation called &ldquo;giffy&rdquo;, it will run indefinitely, and it will have a linear timing function (as opposed to ease, ease-in-out, etc&hellip;):</p>

<div data-height="268" data-theme-id="2905" data-slug-hash="urHce" data-user="brbcoding" data-default-tab="css" class='codepen'><pre><code>#faux-gif {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    margin: auto;
    background-image: url(http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif);
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
    width: 300px;
    height: 300px;
    animation: giffy 0.5s infinite linear;
}


@keyframes giffy {
    from   { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif&#x27;); } 
    to { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;fx5wUNY.gif&#x27;); }
}</code></pre>
<p>See the Pen <a href='http://codepen.io/brbcoding/pen/urHce'>urHce</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>
</div>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>


<p>We have an almost-gif now&hellip; We just need to add the other frames. The cool part about keyframes is that you can use percentages instead of <code>to{ } ... from{ }</code>. Let&rsquo;s see how many we will need&hellip; We have 8 frames total, and 100% duration to work with. You may first think that you&rsquo;ll work in increments of 12.5%. That would be fine, but we haven&rsquo;t taken into account that our first frame is already taken care of with the initial state. That&rsquo;s the value we&rsquo;ll use at 0%. Instead, we&rsquo;ll want to do 100 / 7 (rounded to something simple to work with)&hellip; I&rsquo;ll just use 14.25%. Now, we&rsquo;ll create keyframes from 0% &ndash; ~100% in increments of 14.25%.</p>

<div data-height="268" data-theme-id="2905" data-slug-hash="Kiumf" data-user="brbcoding" data-default-tab="css" class='codepen'><pre><code>#faux-gif {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    margin: auto;
    background-image: url(http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif);
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
    width: 300px;
    height: 300px;
    animation: giffy 0.5s infinite linear;
}

#faux-gif:hover {
    animation-play-state:paused;
}

@keyframes giffy {
    0%   { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;E2ee6fI.gif&#x27;); } 
    14.25%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;JIi0uul.gif&#x27;); }
    28.5%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;owNGnNN.gif&#x27;);}
    42.75%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;2Ii6XOz.gif&#x27;); }
    57%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;ZmQBrQ5.gif&#x27;); }
    71.25%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;iAsfHyY.gif&#x27;); }
    85.5%  { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;AJwRblj.gif&#x27;); }
    99.75% { background-image: url(&#x27;http:&#x2F;&#x2F;i.imgur.com&#x2F;fx5wUNY.gif&#x27;); }
}</code></pre>
<p>See the Pen <a href='http://codepen.io/brbcoding/pen/Kiumf'>Kiumf</a> by Cody Henshaw (<a href='http://codepen.io/brbcoding'>@brbcoding</a>) on <a href='http://codepen.io'>CodePen</a></p>
</div>


<script async src="http://brbcoding.github.io//codepen.io/assets/embed/ei.js"></script>


<p>And that&rsquo;s about it. You can play with the animation timing, the duration, etc&hellip; You couldn&rsquo;t do that with your .gif, now could you? You&rsquo;ll see that I also added a <code>:hover</code> state. That was to satisfy the requirements of the Stack Overflow post I was solving with this technique. Thanks for checking it out, please let me know what mistakes I have made, and say hi <a href="https://twitter.com/CodyHenshaw">@CodyHenshaw</a> on twitter.</p>
]]></content>
  </entry>
  
</feed>
